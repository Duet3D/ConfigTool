<%  // Get Z-probe values
    const zProbe = model.sensors.probes.find(probe => probe !== null), zProbeIndex = model.sensors.probes.indexOf(zProbe);
    const diveHeight = zProbe ? zProbe.diveHeight : 5;
    const travelSpeed = zProbe ? zProbe.travelSpeed : 6000;

    // Get XYZ(UV) homing properties
    let xEndstop = false, xHighEnd = false, yEndstop = false, yHighEnd = false;
    let xyFastHomingSpeed = 600, xySlowHomingSpeed = 300;
    let zEndstop = false, zHighEnd = false, zFastHomingSpeed = 600, zSlowHomingSpeed = 300;
    let uValid = false, uEndstop = false, uHighEnd = false, uFastHomingSpeed = 600, uSlowHomingSpeed = 300;
    let vValid = false, vEndstop = false, vHighEnd = false, vFastHomingSpeed = 600, vSlowHomingSpeed = 300;
    for (let i = 0; i < model.move.axes.length; i++) {
        const axis = model.move.axes[i];
        if (model.sensors.endstops.length > i && model.sensors.endstops[i] !== null) {
            let homingSpeeds = [10, 5];
            if (axis.drivers.length > 0) {
                const firstDriver = model.configTool.drivers.find(driver => driver.id.equals(axis.drivers[0]));
                if (firstDriver) {
                    homingSpeeds = firstDriver.homingSpeeds;
                }
            }

            const endstop = model.sensors.endstops[i];
            if (axis.letter === 'X') {
                xEndstop = true;
                xHighEnd = endstop.highEnd;
                xyFastHomingSpeed = homingSpeeds[0] * 60;
                xySlowHomingSpeed = (homingSpeeds.length > 1) ? homingSpeeds[1] * 60 : null;
            } else if (axis.letter === 'Y') {
                yEndstop = true;
                yHighEnd = endstop.highEnd;
            } else if (axis.letter === 'Z' && endstop.type !== EndstopType.ZProbeAsEndstop) {
                zEndstop = true;
                zHighEnd = endstop.highEnd;
                zFastHomingSpeed = homingSpeeds[0] * 60;
                zSlowHomingSpeed = (homingSpeeds.length > 1) ? homingSpeeds[1] * 60 : null;
            } else if (axis.letter === 'U') {
                uEndstop = true;
                uHighEnd = endstop.highEnd;
                uFastHomingSpeed = homingSpeeds[0] * 60;
                uSlowHomingSpeed = (homingSpeeds.length > 1) ? homingSpeeds[1] * 60 : null;
            } else if (axis.letter === 'V') {
                vEndstop = true;
                vHighEnd = endstop.highEnd;
                vFastHomingSpeed = homingSpeeds[0] * 60;
                vSlowHomingSpeed = (homingSpeeds.length > 1) ? homingSpeeds[1] * 60 : null;
            }
        }
    }

    let fastHomingSpeed = xyFastHomingSpeed, slowHomingSpeed = xySlowHomingSpeed;
    if (model.move.kinematics.name === KinematicsName.coreXYU) {
        uValid = true;
        fastHomingSpeed = Math.min(fastHomingSpeed, uFastHomingSpeed);
        if (uSlowHomingSpeed !== null) {
            if (slowHomingSpeed === null) {
                slowHomingSpeed = uSlowHomingSpeed;
            } else {
                slowHomingSpeed = Math.min(slowHomingSpeed, uSlowHomingSpeed);
            }
        }
    } else if (model.move.kinematics.name === KinematicsName.coreXYUV) {
        uValid = vValid = true;
        fastHomingSpeed = Math.min(fastHomingSpeed, uFastHomingSpeed, vFastHomingSpeed);
        if (slowHomingSpeed === null) {
            if (uSlowHomingSpeed === null) {
                slowHomingSpeed = vSlowHomingSpeed;
            } else if (vSlowHomingSpeed !== null) {
                slowHomingSpeed = Math.min(uSlowHomingSpeed, vSlowHomingSpeed);
            }
        } else if (uSlowHomingSpeed === null) {
            slowHomingSpeed = Math.min(slowHomingSpeed, vSlowHomingSpeed);
        } else if (vSlowHomingSpeed !== null) {
            slowHomingSpeed = Math.min(slowHomingSpeed, uSlowHomingSpeed, vSlowHomingSpeed);
        }
    }
-%>
; increase Z
G91 ; relative positioning
G1 H<%- zEndstop && zHighEnd ? 1 : 2 %> Z<%- diveHeight %> F<%- travelSpeed %> ; move Z relative to current position to avoid dragging nozzle over the bed
G90 ; absolute positioning

; home <%- vValid ? "XYUV" : (uValid ? "XYU" : "XY") %>
<%  if (!xEndstop || !yEndstop) {
        // manual XY homing. CoreXY requires endstops for both X and Y
-%>
G92 X0 Y0 ; set X=0 and Y=0
M118 L1 P0 S"Warning: X and Y are NOT homed but their positions have been set to 0."
G91 ; relative positioning
<%  } else {
        // normal XY homing
-%>
var xTravel = move.axes[0].max - move.axes[0].min + 5 ; calculate how far X can travel plus 5mm
var yTravel = move.axes[1].max - move.axes[1].min + 5 ; calculate how far Y can travel plus 5mm
<%      if (uValid) { -%>
var uTravel = move.axes[3].max - move.axes[3].min + 5 ; calculate how far U can travel plus 5mm
<%          if (vValid) { -%>
var vTravel = move.axes[4].max - move.axes[4].min + 5 ; calculate how far V can travel plus 5mm
<%          }
        } -%>
G91 ; relative positioning
G1 <%- params({
    H: 1,
    X: xHighEnd ? "{var.xTravel}" : "{-var.xTravel}",
    Y: yHighEnd ? "{var.yTravel}" : "{-var.yTravel}",
    U: uValid ? (uHighEnd ? "{var.uTravel}" : "{-var.uTravel}") : undefined,
    V: vValid ? (vHighEnd ? "{var.vTravel}" : "{-var.vTravel}") : undefined,
    F: fastHomingSpeed
}) %> ; <%- (xySlowHomingSpeed !== null) ? "coarse home" : "home" %>
G1 <%- params({
    H: 1,
    X: xHighEnd ? "{var.xTravel}" : "{-var.xTravel}",
    F: xyFastHomingSpeed
}) %> ; <%- (xySlowHomingSpeed !== null) ? "coarse home" : "home" %> in the <%- xHighEnd ? "+" : "-" %>X direction
G1 <%- params({
    H: 1,
    Y: yHighEnd ? "{var.yTravel}" : "{-var.yTravel}",
    F: xyFastHomingSpeed
}) %> ; <%- (xySlowHomingSpeed !== null) ? "coarse home" : "home" %> in the <%- yHighEnd ? "+" : "-" %>Y direction
<%      if (uValid) { -%>
G1 <%- params({
    H: 1,
    U: uHighEnd ? "{var.uTravel}" : "{-var.uTravel}",
    F: uFastHomingSpeed
}) %> ; <%- (uSlowHomingSpeed !== null) ? "coarse home" : "home" %> in the <%- uHighEnd ? "+" : "-" %>U direction
<%          if (vValid) { -%>
G1 <%- params({
    H: 1,
    V: vHighEnd ? "{var.vTravel}" : "{-var.vTravel}",
    F: vFastHomingSpeed
}) %> ; <%- (vSlowHomingSpeed !== null) ? "coarse home" : "home" %> in the <%- vHighEnd ? "+" : "-" %>V direction
<%          }
        }

        if (slowHomingSpeed !== null) {
            // second pass
-%>
G1 <%- params({
    X: (xySlowHomingSpeed !== null) ? (xHighEnd ? -5 : 5) : undefined,
    Y: (xySlowHomingSpeed !== null) ? (yHighEnd ? -5 : 5) : undefined,
    U: uValid ? (uHighEnd ? -5 : 5) : undefined,
    V: vValid ? (vHighEnd ? -5 : 5) : undefined,
    F: travelSpeed
}) %> ; move back 5mm
G1 <%- params({
    H: 1,
    X: xHighEnd ? "{var.xTravel}" : "{-var.xTravel}",
    Y: yHighEnd ? "{var.yTravel}" : "{-var.yTravel}",
    U: uValid ? (uHighEnd ? "{var.uTravel}" : "{-var.uTravel}") : undefined,
    V: vValid ? (vHighEnd ? "{var.vTravel}" : "{-var.vTravel}") : undefined,
    F: slowHomingSpeed
}) %> ; fine home
G1 <%- params({
    H: 1,
    X: xHighEnd ? "{var.xTravel}" : "{-var.xTravel}",
    F: xySlowHomingSpeed ?? slowHomingSpeed
}) %> ; fine home in the <%- xHighEnd ? "+" : "-" %>X direction
G1 <%- params({
    H: 1,
    Y: yHighEnd ? "{var.yTravel}" : "{-var.yTravel}",
    F: xySlowHomingSpeed ?? slowHomingSpeed
}) %> ; fine home in the <%- yHighEnd ? "+" : "-" %>Y direction
<%          if (uValid) { -%>
G1 <%- params({
    H: 1,
    U: uHighEnd ? "{var.uTravel}" : "{-var.uTravel}",
    F: uSlowHomingSpeed ?? slowHomingSpeed
}) %> ; fine home in the <%- uHighEnd ? "+" : "-" %>U direction
<%              if (vValid) { -%>
    G1 <%- params({
    H: 1,
    V: vHighEnd ? "{var.vTravel}" : "{-var.vTravel}",
    F: vSlowHomingSpeed ?? slowHomingSpeed
}) %> ; fine home in the <%- vHighEnd ? "+" : "-" %>V direction
<%              }
            }
        }
    } -%>
G90 ; absolute positioning

; home Z
<%  if (zEndstop) {
        // use Z endstop for homing
-%>
var zTravel = move.axes[2].max - move.axes[2].min + 5 ; calculate how far Z can travel plus 5mm
G91 ; relative positioning
G1 <%- params({
    H: 1,
    Z: zHighEnd ? "{var.zTravel}" : "{-var.zTravel}",
    F: zFastHomingSpeed
}) -%> ; <%- (zFastHomingSpeed !== zSlowHomingSpeed) ? "coarse home" : "home" %> in the <%- zHighEnd ? "+" : "-" %>Z direction
<%      if (zFastHomingSpeed !== zSlowHomingSpeed) {
            // second pass
-%>
G1 <%- params({
    Z: zHighEnd ? -diveHeight : diveHeight,
    F: travelSpeed
}) %> ; move back <%- diveHeight %>mm
G1 <%- params({
    H: 1,
    Z: zHighEnd ? 10 : -10,
    F: zSlowHomingSpeed
}) %> ; fine home in the <%- zHighEnd ? "+" : "-" %>Z direction
G90 ; absolute positioning
<%      }
    } else if (zProbe) {
        // use Z probe
        if (usingMeshCompensation() && model.move.compensation.probeGrid.axes[0] === 'X' && model.move.compensation.probeGrid.axes[1] === 'Y') {
            if (preview) { -%>
; NOTE: The following XY coordinates use values from the probe grid defined in the next section
<%          } -%>
var xCenter = move.compensation.probeGrid.mins[0] + (move.compensation.probeGrid.maxs[0] - move.compensation.probeGrid.mins[0]) / 2 - sensors.probes[<%- zProbeIndex %>].offsets[0]
var yCenter = move.compensation.probeGrid.mins[1] + (move.compensation.probeGrid.maxs[1] - move.compensation.probeGrid.mins[1]) / 2 - sensors.probes[<%- zProbeIndex %>].offsets[1]
<%      } else { -%>
var xCenter = move.axes[0].min + (move.axes[0].max - move.axes[0].min) / 2 - sensors.probes[<%- zProbeIndex %>].offsets[0]
var yCenter = move.axes[1].min + (move.axes[1].max - move.axes[1].min) / 2 - sensors.probes[<%- zProbeIndex %>].offsets[1]
<%          usingProbeGrid = false;
        } -%>
G1 <%- params({
    X: "{var.xCenter}",
    Y: "{var.yCenter}",
    F: travelSpeed
}) %> ; go to bed centre
G30 ; probe the bed
<%  } else { -%>
G92 Z0 ; set Z=0
M118 L1 P0 S"Warning: Z is NOT homed but its position has been set to 0."
<%  } -%>