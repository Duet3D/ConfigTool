<%  if (!preview) { -%>
; homedelta.g
; called to home all towers and extra axes
;
; generated by RepRapFirmware Configuration Tool v<%- version %> on <%- (new Date()).toString() %>

<%  }

    if (model.move.kinematics.name === KinematicsName.rotaryDelta) { -%>
; rotary delta is not supported yet, see https://docs.duet3d.com/User_manual/Machine_configuration/Configuration_rotary_delta
<%  } else {
-%>
; home linear delta
G91 ; relative positioning
var homedHeight = <%- model.move.kinematics.homedHeight + 5 %> ; set homed height plus 5mm
<%      let canHome = true;
        for (let i = 0; i < 3; i++) {
            if (model.sensors.endstops[i] === null) {
                canHome = false;
                break;
            }
        }
        
        if (canHome) {
            const highEndstops = model.sensors[0].highEnd;
            let homingSpeeds = [10, 5];
            if (model.move.axes[0].drivers.length > 0) {
                const firstDriver = model.configTool.drivers.find(driver => driver.id.equals(model.move.axes[0].drivers[0]));
                if (firstDriver) {
                    homingSpeeds = firstDriver.homingSpeeds;
                }
            }
            const fastHomingSpeed = model.configTool.delta.slowHoming ? homingSpeeds[0] * 0.1 : homingSpeeds[0];
            const slowHomingSpeed = model.configTool.delta.slowHoming ? Math.min(fastHomingSpeed, homingSpeeds[1]) : homingSpeeds[1];
            const zProbe = model.configTool.sensors.probes.find(probe => probe !== null), travelSpeed = zProbe ? zProbe.travelSpeed : 6000;

            if (model.configTool.delta.slowHoming) { -%>
;*** Slow homing has been configured. Change F<%- fastHomingSpeed * 60 %> to F<%- homingSpeeds[0] * 60 %> below when your configuration is working
<%          } -%>
G1 <%- params({
    H: 1,
    X: highEndstops ? "{var.homedHeight}" : "{-var.homedHeight}",
    Y: highEndstops ? "{var.homedHeight}" : "{-var.homedHeight}",
    Z: highEndstops ? "{var.homedHeight}" : "{-var.homedHeight}",
    F: fastHomingSpeed * 60
}) %> ; move all towers to the <%- highEndstops ? "high" : "low" %> end stopping at the endstops
<%          if (fastHomingSpeed !== slowHomingSpeed) { -%>
G1 <%- params({
    H: 2,
    X: highEndstops ? "-10" : "10",
    Y: highEndstops ? "-10" : "10",
    Z: highEndstops ? "-10" : "10",
    F: travelSpeed
}) %> ; go <%- highEndstops ? "down" : "up" %> a few mm
G1 <%- params({
    H: 1,
    X: highEndstops ? "{var.homedHeight}" : "{-var.homedHeight}",
    Y: highEndstops ? "{var.homedHeight}" : "{-var.homedHeight}",
    Z: highEndstops ? "{var.homedHeight}" : "{-var.homedHeight}",
    F: fastHomingSpeed * 60
}) %> ; move all towers to the <%- highEndstops ? "high" : "low" %> end once more stopping at the endstops
G90 ; absolute positioning
G1 X0 Y0 F<%- travelSpeed %> ; move X and Y to the centre

<%          }
        } else { -%>
G92 X0 Y0 Z0 ; set X=0 Y=0 Z=0
M118 L1 P0 S"Warning: XYZ are NOT homed but their positions have been set to 0."
<%      }
    }

    // home additional axes
    for (const axis of model.move.axes) {
        if (!['X', 'Y', 'Z'].includes(axis.letter) && model.canHomeIndividualAxis(axis.letter)) { -%>
M98 P"home<%- /[a-z]/.test(axis.letter) ? `'${axis.letter}` : axis.letter %>.g" ; home <%- axis.letter %> axis
<%      }
    } -%>
