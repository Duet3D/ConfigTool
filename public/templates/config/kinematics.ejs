<%  if (model.move.kinematics instanceof CoreKinematics) {
        let kinematicsName, kParam;
        switch (model.move.kinematics.name) {
            case KinematicsName.cartesian:
                kinematicsName = "Cartesian";
                kParam = 0;
                break;
            case KinematicsName.coreXY:
                kinematicsName = "CoreXY";
                kParam = 1;
                break;
            case KinematicsName.coreXZ:
                kinematicsName = "CoreXZ";
                kParam = 2;
                break;
            case KinematicsName.coreXYU:
                kinematicsName = "CoreXYU";
                kParam = 5;
                break;
            case KinematicsName.coreXYUV:
                kinematicsName = "CoreXYUV";
                kParam = 8;
                break;
            case KinematicsName.markForged:
                kinematicsName = "MarkForged";
                kParam = 11;
                break;
            default:
                throw new Error(`Unsupported core kinematics: ${model.move.kinematics.name}`);
        }

        let moveCoefficients = "";
        if (!isDefaultCoreKinematics(model.move.kinematics)) {
            const letters = "XYZUVAB";
            for (let i = 0; i < model.move.kinematics.forwardMatrix.length; i++) {
                moveCoefficients += ` ${letters[i]}${model.move.kinematics.forwardMatrix[i].join(':')}`;
            }
        } -%>
M669 K<%- kParam %><%- moveCoefficients %> ; configure <%- kinematicsName %> kinematics
<%  } else if (model.move.kinematics.name === KinematicsName.delta) {
        let rodLengths = model.move.kinematics.towers.map(tower => tower.diagonal);
        if (!rodLengths.some(diagnonal => diagnonal != rodLengths[0])) {
            rodLengths = rodLengths[0];
        } -%>
M665 <%- params({
    L: rodLengths,
    R: model.move.kinematics.deltaRadius,
    B: model.move.kinematics.printRadius,
    H: model.move.kinematics.homedHeight
}) %> ; set delta radius, diagonal rod length, printable radius and homed height
M208 Z<%- model.move.axes.find(axis => axis.letter === 'Z').min %> S1 ; set minimum Z
M666 <%- params({
    X: model.move.kinematics.towers[0].endstopAdjustment,
    Y: model.move.kinematics.towers[1].endstopAdjustment,
    Z: model.move.kinematics.towers[2].endstopAdjustment,
    A: model.move.kinematics.xTilt,
    B: model.move.kinematics.yTilt
}) %> ; endstop adjustments and XY tilt, can be determined using auto calibration as well
<%  } else if (model.move.kinematics.name === KinematicsName.hangprinter) { -%>
M669 <%- params({
    K: 7,
    A: model.move.kinematics.anchors[0],
    B: model.move.kinematics.anchors[1],
    C: model.move.kinematics.anchors[2],
    D: model.move.kinematics.anchors[3],
    P: model.move.kinematics.printRadius
}) %> ; configure hangprinter kinematics
M208 S0 Z<%- model.move.axes.find(axis => axis.letter === 'Z').max %> ; set maximum height
M208 S1 Z<%- model.move.axes.find(axis => axis.letter === 'Z').min %> ; set minimum height
<%  } else { -%>
; Unsupported kinematics: <%- model.move.kinematics.name %>
<%  } -%>
