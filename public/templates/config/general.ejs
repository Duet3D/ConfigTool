M550 P<%- escape(model.network.name) -%> ; set hostname
<%  if (model.configTool.autoSave.enabled) { -%>
M911 <%- params({
    S: model.configTool.autoSave.saveThreshold,
    R: model.configTool.autoSave.resumeThreshold,
    P: model.configTool.autoSave.codesToRun
}) -%> ; set voltage thresholds and actions to run on power loss
<%  }
    if (model.configTool.capabilities.cnc) {
        if (preview) { -%>
; see Spindles section for a preview of the spindle configuration
<%      } else {
            for (let i = 0; i < model.spindles.length; i++) {
                const spindle = model.spindles[i];
                if (spindle !== null) { -%>
M950 <%- params({
    C: getCombinedPort([ConfigPortFunction.spindlePwm, ConfigPortFunction.spindleForwards, ConfigPortFunction.spindleBackwards], i),
    Q: getPort(ConfigPortFunction.spindlePwm).frequency,
    L: [spindle.min, spindle.max]
}) %> ; configure spindle #<%- i %>
<%              }
            }
        }
    }
    if (model.configTool.capabilities.laser) {
        if (preview) { -%>
; see Laser section for a preview of the laser configuration
<%      } else { -%>
M452 <%- params({
    C: getPortString(ConfigPortFunction.laser),
    R: model.configTool.laser.maxIntensity,
    S: model.configTool.laser.sParamSticky
}) %> ; configure laser
<%      }
    }

    // Preview shows end of config.g
    if (preview && ((model.configTool.autoSelectFirstTool && model.tools.some(tool => tool !== null)) || model.configTool.configOverride)) { -%>

; ... generated at the end of config.g:
<%- await render("config/end.ejs") -%>
<%  } -%>