; Configuration file for <%- board.caption %> (firmware version <%- util.getFirmwareString() %>)
; executed by the firmware on start-up
;
; generated by RepRapFirmware Configuration Tool v<%- version %> on <%- (new Date()).toString() %>

; General preferences
G90 ; send absolute coordinates...
M83 ; ...but relative extruder moves
M550 P"<%- template.standalone ? template.network.name : 'Duet 3' %>" ; set printer name
<%	if (template.geometry.type === 'delta') { -%>
M665 R<%- template.geometry.delta_radius %> L<%- template.geometry.rod_length %> B<%- template.geometry.print_radius %> H<%- template.geometry.homed_height %> ; Set delta radius, diagonal rod length, printable radius and homed height
M666 X0 Y0 Z0 ; put your endstop adjustments here, or let auto calibration find them
<%	} else if (template.geometry.type.startsWith('core')) {
		let sParam = 1;
		if (template.geometry.type === 'corexz') { sParam = 2; }
		if (template.geometry.type === 'coreyz') { sParam = 3; } %>
M667 S<%- sParam %> ; select CoreXY mode
<%	}
	if (template.display.type) {
-%>
M918 P<%- template.display.type %> E<%- template.display.encoder_steps + ((template.firmware >= 2.03) ? ` F${template.display.spi_frequency}` : '') %> ; configure direct-connect display
<%	}

	if (template.standalone) {
-%>

; Network
<%		if (template.network.enabled) { -%>
<%			if (template.network.password !== '') { -%>
M551 P"<%- template.network.password %>" ; set password
<%			}
			if (template.network.hasOwnProperty('mac_address') && template.network.mac_address !== '') { -%>
M540 P<%- template.network.mac_address %> ; set custom MAC address
<%			}
			if (template.board.startsWith('duetwifi')) { -%>
M552 S1 ; enable network
<%			} else if (template.network.dhcp) { -%>
M552 P0.0.0.0 S1 ; enable network and acquire dynamic address via DHCP
<%			} else { -%>
M552 P<%- template.network.ip %> S1 ; enable network and set IP address
M553 P<%- template.network.netmask %> ; set netmask
M554 P<%- template.network.gateway %> ; set gateway
<%			} -%>
M586 P0 S<%- template.network.protocols.http ? '1' : '0' -%> ; <%- template.network.protocols.http ? 'enable' : 'disable' -%> HTTP
M586 P1 S<%- template.network.protocols.ftp ? '1' : '0' -%> ; <%- template.network.protocols.ftp ? 'enable' : 'disable' -%> FTP
M586 P2 S<%- template.network.protocols.telnet ? '1' : '0' -%> ; <%- template.network.protocols.telnet ? 'enable' : 'disable' -%> Telnet
<%		} else if (!template.board.startsWith('duetwifi')) { -%>
M552 S0 ; disable network
<%		}
	} -%>

; Drives
<%	template.drives.forEach(function(drive, i) {
		const driver = util.formatDriver(drive);

		//lpc
		var stepperDriver = "";
		var stepperDriverTimings = "";
		if(board.stepperDriver == undefined || board.stepperDriver != ""){
			//has built in drivers, use presets
			stepperDriver = board.stepperDriver;
			stepperDriverTimings = board.stepperDriverTimings;
		} else {
			stepperDriver = drive.stepperDriver;
			stepperDriverTimings = drive.stepperDriverTimings;
		}
-%>
M569 P<%- driver %> S<%- drive.direction %> <%- (stepperDriver != "")?"T"+stepperDriverTimings:"" %> ; physical drive <%- driver %> goes <%- (drive.direction === 0) ? 'backwards' : 'forwards' %> using <%- (stepperDriver != "")?stepperDriver:"default" %> driver timings
<%	}); -%>
M584 <%- util.makeDriverString() %> ; set drive mapping
<%	if (board.microstepping) {
		const nonInterpolatedDrives = util.makeDriveString('microstepping', 1, 0, (drive) => !drive.microstepping_interpolation);
		if (nonInterpolatedDrives !== '') { -%>
M350 <%- nonInterpolatedDrives %> I0 ; configure microstepping without interpolation
<%		}

		const interpolatedDrives = util.makeDriveString('microstepping', 1, 0, (drive) => drive.microstepping_interpolation);
		if (interpolatedDrives !== '') { -%>
M350 <%- interpolatedDrives %> I1 ; configure microstepping with interpolation
<%		}
	} -%>
M92 <%- util.makeDriveString('steps_per_mm', 1) %> ; set steps per mm
M566 <%- util.makeDriveString('instant_dv', 60) %> ; set maximum instantaneous speed changes (mm/min)
M203 <%- util.makeDriveString('max_speed', 60) %> ; set maximum speeds (mm/min)
M201 <%- util.makeDriveString('acceleration', 1) %> ; set accelerations (mm/s^2)
<%	if (template.idle.used) { -%>
M906 <%- util.makeDriveString('current', 1, 0) %> I<%- template.idle.factor %> ; set motor currents (mA) and motor idle factor in per cent
M84 S<%- template.idle.timeout %> ; Set idle timeout
<%	} else { -%>
M906 <%- util.makeDriveString('current', 1, 0) %> ; set motor currents (mA)
M84 S0 ; Disable motor idle current reduction
<%	} -%>

; Axis Limits
<%	if (template.geometry.type === 'delta') { -%>
M208 Z<%- template.geometry.z_min %> S1 ; set minimum Z
<%	} else { -%>
M208 X<%- template.geometry.mins[0] %> Y<%- template.geometry.mins[1] %> Z<%- template.geometry.mins[2] %> S1 ; set axis minima
M208 X<%- template.geometry.maxes[0] %> Y<%- template.geometry.maxes[1] %> Z<%- template.geometry.maxes[2] %> S0 ; set axis maxima
<%	} -%>

; Endstops
<%	if (template.firmware >= 3) {
		let endstopsConfigured = false;
		for (let axis = 0; axis < 3; axis++) {
			const drive = template.drives[axis];
			if (drive.endstop_type > 0) {
				endstopsConfigured = true;
				const end = (drive.endstop_location === 1) ? 'low' : 'high';
				let type = 'unknown', sParam = 0;
				switch (drive.endstop_type) {
					case 1:
						type = 'active-high';
						sParam = 1;
						break;
					case 2:
						type = 'active-low';
						sParam = 0;
						break;
					case 3:
						type = 'Z-probe';
						sParam = 2;
						break;
					case 4:
						type = 'sensorless';
						sParam = 3;
						break;
				} -%>
M574 <%- 'XYZ'[axis] %><%- drive.endstop_location %> S<%- sParam %><%- (drive.endstop_type < 3) ? ` P"${drive.endstop_pin}"` : '' %> ; configure <%- type %> endstop for <%- end %> end on <%- 'XYZ'[axis] %><%- (drive.endstop_type < 3) ? ` via pin ${drive.endstop_pin}` : '' %>
<%			}
		}
		if (!endstopsConfigured) { -%>
; WARNING: No endstops configured
<%		}
	} else {
		let activeLowSwitches = '';
		if (template.drives[0].endstop_type === 0) {
			activeLowSwitches += ' X0';
		} else if (template.drives[0].endstop_type === 2) {
			activeLowSwitches += ' X' + template.drives[0].endstop_location;
		}
		if (template.drives[1].endstop_type === 0) {
			activeLowSwitches += ' Y0';
		} else if (template.drives[1].endstop_type === 2) {
			activeLowSwitches += ' Y' + template.drives[1].endstop_location;
		}
		if (template.drives[2].endstop_type === 0) {
			activeLowSwitches += ' Z0';
		} else if (template.drives[2].endstop_type === 2) {
			activeLowSwitches += ' Z' + template.drives[2].endstop_location;
		}
		if (activeLowSwitches !== '') { -%>
M574<%- activeLowSwitches %> S0 ; set active low and disabled endstops
<%		}
		const activeHighSwitches = util.makeDriveString('endstop_location', 1, 0, (drive, index) => drive.endstop_type === 1 && index < 3);
		if (activeHighSwitches !== '') { -%>
M574 <%- activeHighSwitches %> S1 ; set active high endstops
<%		}
		const sensorlessEndstops = util.makeDriveString('endstop_location', 1, 0, (drive, index) => drive.endstop_type === 4 && index < 3);
		if (sensorlessEndstops !== '') { -%>
M574 <%- sensorlessEndstops %> S3 ; set endstops controlled by motor stall detection
<%		}
		const zProbeSwitches = util.makeDriveString('endstop_location', 1, 0, (drive, index) => drive.endstop_type === 3 && index < 3);
		if (zProbeSwitches !== '') { -%>
M574 <%- zProbeSwitches %> S2 ; set endstops controlled by probe
<%		}
	} -%>

; Z-Probe
<%	if (template.probe.type === 'noprobe') { -%>
M558 P0 H<%- template.z_dive_height %> F<%- template.probe.speed * 60 %> T<%- template.travel_speed * 60 %> ; disable Z probe but set dive height, probe speed and travel speed
<%	} else {
		if (template.firmware < 3) {
			if (template.probe.type === 'bltouch' && !template.board.startsWith('duetm')) { -%>
M307 H<%- template.probe.pwm_channel %> A-1 C-1 D-1 ; disable heater on PWM channel for BLTouch
<%			}
		} else if (template.probe.type === 'bltouch') { -%>
M950 S0 C"<%- template.probe.pwm_pin %>" ; create servo pin 0 for BLTouch
<%		}

		let zProbeType = 0, cArg = '';
		switch (template.probe.type) {
			case 'switch':
				zProbeType = (template.geometry.type === 'delta') ? 4 : 5;
				break;
			case 'unmodulated':
				zProbeType = 1;
				break;
			case 'modulated':
				zProbeType = 2;
				break;
			case 'effector':
				zProbeType = '5 R' + template.probe.recovery_time;
				break;
			case 'bltouch':
				zProbeType = 9;
				break;
		}
		if (template.firmware >= 3 && template.probe.input_pin) {
			if (template.probe.modulation_pin) {
				cArg = ` C"${template.probe.input_pin}+${template.probe.modulation_pin}"`;
			} else {
				cArg = ` C"${template.probe.input_pin}"`;
			}
		}
	-%>
M558 P<%- zProbeType %><%- cArg %> H<%- template.z_dive_height %> F<%- template.probe.speed * 60 %> T<%- template.travel_speed * 60 %> ; set Z probe type to <%- template.probe.type %> and the dive height + speeds
<%		if (template.geometry.low_dive_height) { -%>
M558 H30 ;*** Remove this line after delta calibration has been done and new delta parameters have been saved
<%		} -%>
G31 P<%- template.probe.trigger_value %> X<%- template.probe.x_offset %> Y<%- template.probe.y_offset %> Z<%- template.probe.trigger_height %> ; set Z probe trigger value, offset and trigger height
<%	}
	if (template.orthogonal.compensation) { -%>
M556 S<%- template.orthogonal.height %> X<%- template.orthogonal.deviations[0] %> Y<%- template.orthogonal.deviations[1] %> Z<%- template.orthogonal.deviations[2] %> ; set orthogonal axis compensation parameters
<%	}
	if (template.geometry.type === 'delta') {-%>
M557 R<%- template.mesh.radius %> S<%- template.mesh.spacing %> ; define mesh grid
<%	} else { -%>
M557 X<%- template.mesh.x_min %>:<%- template.mesh.x_max %> Y<%- template.mesh.y_min %>:<%- template.mesh.y_max %> S<%- template.mesh.spacing %> ; define mesh grid
<%	} -%>

; Heaters
<%	if (template.firmware >= 3) {
		if (!template.bed.present && template.board !== 'duet3') { -%>
M140 H-1 ; disable heated bed (overrides default heater mapping)
<%		}

		template.heaters.forEach(function(heater, i) {
			let extraArgs = '', extraComment = '';
			switch (heater.sensor_type) {
				case 'thermistor':
					extraArgs = ` T${heater.thermistor} B${heater.beta}`;
					if (heater.c > 0) {
						extraArgs += ` C${heater.c}`;
					}
					extraComment = `as thermistor on pin ${heater.sensor_pin}`;
					break;
				case 'pt100':
					extraComment = `as PT100 on pin ${heater.sensor_pin}`;
					break;
				case 'pt1000':
					extraArgs = ` R${heater.series}`;
					extraComment = `as PT1000 on pin ${heater.sensor_pin}`;
					break;
				default:
					extraComment = `as thermocouple via CS pin ${heater.sensor_pin}`;
					break;
			}
			let heaterType = 'nozzle';
			if (template.bed.present && template.bed.heater === i) {
				heaterType = 'bed';
			} else if (template.chamber.present && template.chamber.heater === i) {
				heaterType = 'chamber';
			} -%>
M308 S<%- i %> P"<%- heater.sensor_pin %>" Y"<%- heater.sensor_type %>"<%- extraArgs %> ; configure sensor <%- i %> <%- extraComment %>
M950 H<%- i %> C"<%- heater.output_pin %>" T<%- i %> ; create <%- heaterType %> heater output on <%- heater.output_pin %> and map it to sensor <%- i %>
M143 H<%- i %> S<%- heater.temp_limit %> ; set temperature limit for heater <%- i %> to <%- heater.temp_limit %>C
<%			if (heaterType === 'bed' && (i !== 0 || template.board === 'duet3')) { -%>
M307 H<%- i %> B<%- template.bed.use_pid ? 0 : 1 %> S<%- (heater.scale_factor / 100).toFixed(2) %> ; <%- template.bed.use_pid ? 'disable' : 'enable' %> bang-bang mode for the bed heater and set PWM limit
M140 H<%- i %> ; map heated bed to heater <%- i %>
<%
			} else if (heaterType === 'chamber') { -%>
M307 H<%- i %> B<%- template.chamber.use_pid ? 0 : 1 %> S<%- (heater.scale_factor / 100).toFixed(2) %> ; <%- template.chamber.use_pid ? 'disable' : 'enable' %> bang-bang mode for the chamber heater and set PWM limit
M141 H<%- i %> ; map chamber to heater <%- template.chamber.heater %>
<%			} else { -%>
M307 H<%- i %> B0 S<%- (heater.scale_factor / 100).toFixed(2) %> ; disable bang-bang mode for the nozzle heater and set PWM limit
<%			}
		});
	} else {
		if (!template.bed.present) { -%>
M140 H-1 ; disable heated bed
<%		} else {
			if (template.bed.heater !== 0) { -%>
M140 H<%- template.bed.heater %> ; remap heated bed to heater <%- template.bed.heater %>
<%			}
			if (template.bed.use_pid) { -%>
M307 H<%- template.bed.heater %> B0 S<%- (template.heaters[template.bed.heater].scale_factor / 100).toFixed(2) %> ; disable bang-bang mode for the bed heater and set PWM limit
<%			} else if (template.bed.heater !== 0) { -%>
M307 H<%- template.bed.heater %> B1 S<%- (template.heaters[template.bed.heater].scale_factor / 100).toFixed(2) %> ; enable bang-bang mode for the bed heater and set PWM limit
<%			}
		}

		if (template.chamber.present) {
			if (template.chamber.heater !== 0) { -%>
M141 H<%- template.chamber.heater %> ; assign chamber heater to heater <%- template.chamber.heater %>
<%			} else if (template.chamber.heater === 0 && template.bed.use_pid) { -%>
M307 H<%- template.chamber.heater %> B0 S<%- (template.heaters[template.chamber.heater].scale_factor / 100).toFixed(2) %> ; disable bang-bang mode for the bed heater and set PWM limit
<%			} else if (template.chamber.heater !== 0) { -%>
M307 H<%- template.chamber.heater %> B0 S<%- (template.heaters[template.chamber.heater].scale_factor / 100).toFixed(2) %> ; enable bang-bang mode for the bed heater and set PWM limit
<%			}
		}

		template.heaters.forEach(function(heater, i) {
			if (heater !== null) {
				if (i !== (template.bed.present ? template.bed.heater : -1) &&
					i !== (template.chamber.present ? template.chamber.heater : -1) &&
					heater.scale_factor !== 100) { -%>
M301 H<%- i %> S<%- (heater.scale_factor / 100).toFixed(2) %> ; set heater <%- i %> PWM limit to <%- heater.scale_factor %>%
<%				}
				if (heater.channel < 100) { -%>
M305 P<%- i %> T<%- heater.thermistor %> B<%- heater.beta + ((heater.c === 0) ? 0 : ' C' + heater.c.toExponential(6)) %> R<%- heater.series %><%- (heater.channel != i) ? ' X' + heater.channel : '' %> ; set thermistor + ADC parameters for heater <%- i %><%- (heater.channel !== i) ? ' and remap it to channel ' + heater.channel : '' %>
<%				} else if (heater.channel >= 200 && heater.channel < 250) { -%>
M305 P<%- i %> X<%- heater.channel %> ; configure PT100 for heater <%- i %>
<%				} else if (heater.channel >= 500 && heater.channel < 550) { -%>
M305 P<%- i %> X<%- heater.channel %> R<%- heater.series %> ; configure PT1000 for heater <%- i %>
<%				} else { -%>
M305 P<%- i %> X<%- heater.channel %> ; configure thermocouple for heater <%- i %>
<%				} -%>
M143 H<%- i %> S<%- heater.temp_limit %> ; set temperature limit for heater <%- i %> to <%- heater.temp_limit %>C
<%			}
		});
	} -%>

; Fans
<%	if (template.firmware >= 3) {
		template.fans.forEach(function(fan, fanNumber) {
			const thermostaticOptions = (fan.thermostatic) ? 'H' + fan.heaters.join(':') + ' T' + fan.trigger_temperature : 'H-1'; -%>
M950 F<%- fanNumber %> C"<%- fan.output_pin %>" Q<%- fan.frequency %> ; create fan <%- fanNumber %> on pin <%- fan.output_pin %> and set its frequency
M106 P<%- fanNumber %><%- (fan.name !== '') ? ` C"${fan.name}"` : '' %> S<%- fan.value / 100 %> <%- thermostaticOptions %> ; set fan <%- fanNumber %> <%- (fan.name !== '') ? 'name and ' : '' %>value. Thermostatic control is turned <%- fan.thermostatic ? 'on' : 'off' %>
<%		});
	} else {
		template.fans.forEach(function(fan, fanNumber) {
			const thermostaticOptions = (fan.thermostatic) ? 'H' + fan.heaters.join(':') + ' T' + fan.trigger_temperature : 'H-1'; -%>
M106 P<%- fanNumber %><%- (fan.name !== '') ? ` C"${fan.name}"` : '' %> S<%- fan.value / 100 %> I<%- fan.inverted ? 1 : 0 %> F<%- fan.frequency %> <%- thermostaticOptions %> ; set fan <%- fanNumber %><%- (fan.name !== '') ? ' name,' : '' %> value, PWM signal inversion and frequency. Thermostatic control is turned <%- fan.thermostatic ? 'on' : 'off' %>
<%		});
	}-%>

; Tools
<%	let toolParams;
	template.tools.forEach(function(tool) {
		toolParams = '';
		if (tool.name != '') {
			toolParams += ` S"${tool.name}"`;
		}
		if (tool.extruders.length > 0) {
			toolParams += ` D${tool.extruders.join(':')}`;
		}
		if (tool.heaters.length > 0) {
			toolParams += ` H${tool.heaters.join(':')}`;
		}
		toolParams += ` F${(tool.fans.length > 0) ? tool.fans.join(':') : '-1'}`;
-%>
M563 P<%- tool.number + toolParams %> ; define tool <%- tool.number %>
G10 P<%- tool.number %> X<%- tool.x_offset %> Y<%- tool.y_offset %> Z<%- tool.z_offset %> ; set tool <%- tool.number %> axis offsets
G10 P<%- tool.number %> R0 S0 ; set initial tool <%- tool.number %> active and standby temperatures to 0C
<%		if (tool.extruders.length > 1) { -%>
M568 P<%- tool.number %> S1 ; enable mixing for tool <%- tool.number %>
M567 P<%- tool.number %> E<%- tool.mix_ratio.join(':') %> ; set mixing ratios for tool <%- tool.number %>
<%		}
	});

	if (template.custom_settings.trim() !== '') { -%>

; Custom settings
<%- template.custom_settings %>
<%	} else { -%>

; Custom settings are not defined
<%	}
	if (template.nvram || template.auto_save.enabled || template.generate_t_code && template.tools.length > 0) { -%>

; Miscellaneous
<%		if (template.nvram) { -%>
M501 ; load saved parameters from non-volatile memory
<%		}
		if (template.auto_save.enabled) {
			const gcodes_to_run = template.auto_save.gcodes_to_run.replace(/'/g, '\'\''); -%>
M911 S<%- template.auto_save.save_threshold -%> R<%- template.auto_save.resume_threshold -%> P"<%- gcodes_to_run -%>" ; set voltage thresholds and actions to run on power loss
<%		}
		if (template.generate_t_code && template.tools.length > 0) { -%>
T<%- template.tools[0].number %> ; select first tool
<%		}
	} -%>
