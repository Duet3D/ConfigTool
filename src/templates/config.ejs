; Configuration file for <%- board.caption %> (firmware version <%- util.getFirmwareString() %>)
; executed by the firmware on start-up
;
; generated by RepRapFirmware Configuration Tool v2 on <%- (new Date()).toString() %>

; General preferences
G90 ; Send absolute coordinates...
M83 ; ...but relative extruder moves
<%	if (template.geometry.type == "delta") { -%>
M665 R<%- template.geometry.delta_radius %> L<%- template.geometry.rod_length %> B<%- template.geometry.print_radius %> H<%- template.geometry.homed_height %> ; Set delta radius, diagonal rod length, printable radius and homed height
M666 X0 Y0 Z0 ; Put your endstop adjustments here, or let auto calibration find them
<%	} else if (template.geometry.type.startsWith("core")) {
		let sParam = 1;
		if (template.geometry.type == "corexz") { sParam = 2; }
		if (template.geometry.type == "coreyz") { sParam = 3; } %>
M667 S<%- sParam %> ; Select CoreXY mode
<% } -%>

; Network
<%	if (template.network.enabled) { -%>
M550 P"<%- template.network.name %>" ; Set machine name
<%		if (template.network.password != "") { -%>
M551 P"<%- template.network.password %>" ; Set password
<%		}
		if (template.network.hasOwnProperty("mac_address") && template.network.mac_address != "") { -%>
M540 P<%- template.network.mac_address %> ; Set custom MAC address
<%		}
		if (template.board.startsWith("duetwifi")) { -%>
M552 S1 ; Enable network
<%			if (!template.network.hasOwnProperty("ssid") || template.network.ssid == "") { -%>
;*** Access point is configured manually via M587
<%			} else {
				if (template.network.dhcp) { -%>
M587 S"<%- template.network.ssid -%>" P"<%- template.network.ssid_password -%>" ; Configure access point. You can delete this line once connected
<%				} else { -%>
M587 S"<%- template.network.ssid -%>" P"<%- template.network.ssid_password -%>" I<%- template.network.ip %> J<%- template.network.gateway -%> K<%- template.network.netmask -%> ; Configure access point and IP addresses. You can delete this line once connected
<%				}
			}
		} else {
			if (template.network.dhcp) { -%>
M552 P0.0.0.0 S1 ; Enable network and acquire dynamic address via DHCP
<%			} else { -%>
M552 P<%- template.network.ip %> S1 ; Enable network and set IP address
M553 P<%- template.network.netmask %> ; Set netmask
M554 P<%- template.network.gateway %> ; Set gateway
<%			}
		} -%>
M586 P0 S<%- template.network.protocols.http ? "1" : "0" -%> ; <%- template.network.protocols.http ? "Enable" : "Disable" -%> HTTP
M586 P1 S<%- template.network.protocols.ftp ? "1" : "0" -%> ; <%- template.network.protocols.ftp ? "Enable" : "Disable" -%> FTP
M586 P2 S<%- template.network.protocols.telnet ? "1" : "0" -%> ; <%- template.network.protocols.telnet ? "Enable" : "Disable" -%> Telnet
<%	} else if (!template.board.startsWith("duetwifi")) { -%>
M552 S0 ; Disable network
<%	} -%>

; Drives
<%	let xDrives, yDrives, zDrives, eDrives;
	let drivesRemapped = false;
	template.drives.forEach(function(drive, i) {
-%>
M569 P<%- i %> S<%- drive.direction %> ; Drive <%- i %> goes <%- (drive.direction == 0) ? "backwards" : "forwards" %>
<%		switch (i) {
			case 0: // X axis
				if (xDrives == undefined) {
					xDrives = drive.driver;
				} else {
					xDrives += ":" + drive.driver;
				}
				break;

			case 1: // Y axis
				if (zDrives == undefined) {
					yDrives = drive.driver;
				} else {
					yDrives += ":" + drive.driver;
				}
				break;

			case 2: // Z axis
				if (zDrives == undefined) {
					zDrives = drive.driver;
				} else {
					zDrives += ":" + drive.driver;
				}
				break;

			default: // E drives
				if (eDrives == undefined) {
					eDrives = drive.driver;
				} else {
					eDrives += ":" + drive.driver;
				}
				break;
		}
		drivesRemapped |= (drive.driver != i);
	});

	let parameters = "";
	if (drivesRemapped) {
		if (xDrives != undefined) {
			parameters += " X" + xDrives;
		}
		if (yDrives != undefined) {
			parameters += " Y" + yDrives;
		}
		if (zDrives != undefined) {
			parameters += " Z" + zDrives;
		}
		if (eDrives != undefined) {
			parameters += " E" + eDrives;
		} -%>
M584<%- parameters %> ; Apply custom drive mapping
<%	}

	if (board.microstepping) {
		parameters = "";
		template.drives.forEach(function(drive, i) {
			if (!drive.microstepping_interpolation) {
				switch(i) {
					case 0:
						parameters += " X" + drive.microstepping;
						break;
					case 1:
						parameters += " Y" + drive.microstepping;
						break;
					case 2:
						parameters += " Z" + drive.microstepping;
						break;
					default:
						if (parameters.indexOf("E") == -1) {
							parameters += " E" + drive.microstepping
						} else {
							parameters += ":" + drive.microstepping;
						}
						break;
				}
			}
		});
		if (parameters != "") { -%>
M350<%- parameters %> I0 ; Configure microstepping without interpolation
<%		}

		parameters = "";
		template.drives.forEach(function(drive, i) {
			if (drive.microstepping_interpolation) {
				switch(i) {
					case 0:
						parameters += " X" + drive.microstepping;
						break;
					case 1:
						parameters += " Y" + drive.microstepping;
						break;
					case 2:
						parameters += " Z" + drive.microstepping;
						break;
					default:
						if (parameters.indexOf("E") == -1) {
							parameters += " E" + drive.microstepping;
						} else {
							parameters += ":" + drive.microstepping;
						}
						break;
				}
			}
		});
		if (parameters != "") { -%>
M350<%- parameters %> I1 ; Configure microstepping with interpolation
<%		}
	} -%>
M92 <%- util.makeDriveString("steps_per_mm", 1) %> ; Set steps per mm
M566 <%- util.makeDriveString("instant_dv", 60) %> ; Set maximum instantaneous speed changes (mm/min)
M203 <%- util.makeDriveString("max_speed", 60) %> ; Set maximum speeds (mm/min)
M201 <%- util.makeDriveString("acceleration", 1) %> ; Set accelerations (mm/s^2)
<%	if (template.idle.used) { -%>
M906 <%- util.makeDriveString("current", 1) %> I<%- template.idle.factor %> ; Set motor currents (mA) and motor idle factor in per cent
M84 S<%- template.idle.timeout %> ; Set idle timeout
<%	} else { -%>
M906 <%- util.makeDriveString("current", 1) %> ; Set motor currents (mA)
M84 S0 ; Disable motor idle current reduction
<%	} -%>

; Axis Limits
<%	if (template.geometry.type == "delta") { -%>
M208 Z<%- template.geometry.z_min %> S1 ; Set minimum Z
<%	} else { -%>
M208 X<%- template.geometry.mins[0] %> Y<%- template.geometry.mins[1] %> Z<%- template.geometry.mins[2] %> S1 ; Set axis minima
M208 X<%- template.geometry.maxes[0] %> Y<%- template.geometry.maxes[1] %> Z<%- template.geometry.maxes[2] %> S0 ; Set axis maxima
<%	} -%>

; Endstops
<%	let activeLowSwitches = "";
	if (template.drives[0].endstop_type == 0 || (template.drives[0].endstop_type == 3 && template.firmware < 1.20)) { activeLowSwitches += " X0"; }
	if (template.drives[0].endstop_type == 2) { activeLowSwitches += " X" + template.drives[0].endstop_location; }
	if (template.drives[1].endstop_type == 0 || (template.drives[1].endstop_type == 3 && template.firmware < 1.20)) { activeLowSwitches += " Y0"; }
	if (template.drives[1].endstop_type == 2) { activeLowSwitches += " Y" + template.drives[1].endstop_location; }
	if (template.drives[2].endstop_type == 0 || (template.drives[2].endstop_type == 3 && template.firmware < 1.20)) { activeLowSwitches += " Z0"; }
	if (template.drives[2].endstop_type == 2) { activeLowSwitches += " Z" + template.drives[2].endstop_location; }
	if (activeLowSwitches != "") { -%>
M574<%- activeLowSwitches %> S0 ; Set active low and disabled endstops
<%	}
	let activeHighSwitches = "";
	if (template.drives[0].endstop_type == 1) { activeHighSwitches += " X" + template.drives[0].endstop_location; }
	if (template.drives[1].endstop_type == 1) { activeHighSwitches += " Y" + template.drives[1].endstop_location; }
	if (template.drives[2].endstop_type == 1) { activeHighSwitches += " Z" + template.drives[2].endstop_location; }
	if (activeHighSwitches != "") { -%>
M574<%- activeHighSwitches %> S1 ; Set active high endstops
<%	}
	let motorLoadEndstops = "";
	if (template.drives[0].endstop_type == 4) { motorLoadEndstops += " X" + template.drives[0].endstop_location; }
	if (template.drives[1].endstop_type == 4) { motorLoadEndstops += " Y" + template.drives[1].endstop_location; }
	if (template.drives[2].endstop_type == 4) { motorLoadEndstops += " Z" + template.drives[2].endstop_location; }
	if (motorLoadEndstops != "") { -%>
M574<%- motorLoadEndstops %> S3 ; Set endstops controlled by motor load detection
<%	} -%>

; Z-Probe
<%	if (template.firmware >= 1.20) {
		let zProbeSwitches = "";
		if (template.drives[0].endstop_type == 3) { zProbeSwitches += " X" + template.drives[0].endstop_location; }
		if (template.drives[1].endstop_type == 3) { zProbeSwitches += " Y" + template.drives[1].endstop_location; }
		if (template.drives[2].endstop_type == 3) { zProbeSwitches += " Z" + template.drives[2].endstop_location; }

		if (zProbeSwitches != "") { -%>
M574<%- zProbeSwitches %> S2 ; Set endstops controlled by probe
<%		}
	}
	let zProbeAxes = "";
	if (template.firmware < 1.20) {
		zProbeAxes += (template.drives[0].endstop_type == 3) ? " X1" : " X0";
		zProbeAxes += (template.drives[1].endstop_type == 3) ? " Y1" : " Y0";
		zProbeAxes += (template.drives[2].endstop_type == 3) ? " Z1" : " Z0";
	}
	let zProbeType = (template.geometry.type == "delta") ? 4 : 0;
	if (template.probe.type == "noprobe") { -%>
M558 P0 H<%- template.z_dive_height %> F<%- template.probe.speed * 60 %> T<%- template.travel_speed * 60 %> ; Disable Z probe but set dive height, probe speed and travel speed
<%	} else {
		if (template.probe.type == "bltouch" && !template.board.startsWith("duetm")) { -%>
M307 H<%- template.probe.pwm_channel %> A-1 C-1 D-1 ; Disable heater on PWM channel for BLTouch
<%		}
		if (template.probe.type == "unmodulated") { zProbeType = 1; }
		if (template.probe.type == "modulated") { zProbeType = 2; }
		if (template.probe.type == "ultrasonic") { zProbeType = 3; }
		if (template.probe.type == "switch") { zProbeType = (template.geometry.type == "delta") ? 4 : 5; }
		if (template.probe.type == "effector") { zProbeType = "5 R" + template.probe.recovery_time; }
		if (template.probe.type == "bltouch") { zProbeType = (template.firmware < 1.21) ? 5 : 9; } -%>
M558 P<%- zProbeType %><%- zProbeAxes %> H<%- template.z_dive_height %> F<%- template.probe.speed * 60 %> T<%- template.travel_speed * 60 %> ; Set Z probe type to <%- template.probe.type %><% if (template.firmware < 1.20) { -%>, the axes for which it is used<% } -%> and the dive height + speeds
<%		if (template.geometry.low_dive_height) { -%>
M558 H30 ;*** Remove this line after delta calibration has been done and new delta parameters have been saved
<%		} -%>
G31 P<%- template.probe.trigger_value %> X<%- template.probe.x_offset %> Y<%- template.probe.y_offset %> Z<%- template.probe.trigger_height %> ; Set Z probe trigger value, offset and trigger height
<%	}
	if (template.orthogonal.compensation) { -%>
M556 S<%- template.orthogonal.height %> X<%- template.orthogonal.deviations[0] %> Y<%- template.orthogonal.deviations[1] %> Z<%- template.orthogonal.deviations[2] %> ; Set orthogonal axis compensation parameters
<%	}
	if (template.geometry.type == "delta") {-%>
M557 R<%- template.mesh.radius %> S<%- template.mesh.spacing %> ; Define mesh grid
<%	} else { -%>
M557 X<%- template.mesh.x_min %>:<%- template.mesh.x_max %> Y<%- template.mesh.y_min %>:<%- template.mesh.y_max %> S<%- template.mesh.spacing %> ; Define mesh grid
<%	} -%>

; Heaters
<%	if (template.firmware <= 1.16) {
		let maxTemp = -273;
		template.heaters.forEach(function(heater) {
			if (heater.temp_limit > maxTemp) {
				maxTemp = heater.temp_limit;
			}
		});
-%>
M143 S<%- maxTemp %> ; Set maximum heater temperature to <%- maxTemp %>C
<%	}
	if (!template.bed.present) { -%>
M140 H-1 ; Disable heated bed
<%	} else {
		if (template.bed.heater != 0) { -%>
M140 H<%- template.bed.heater %> ; Remap heated bed to heater <%- template.bed.heater %>
<%		}
		if (template.firmware <= 1.16) {
			if (template.bed.use_pid) { -%>
M301 H<%- template.bed.heater %> S<%- (template.heaters[template.bed.heater].scale_factor / 100).toFixed(2) %> P10 I0.1 D200 T0.4 W180 B30 ; Use PID on bed heater (may require further tuning)
<%			} else if (template.bed.heater != 0) { -%>
M301 H<%- template.bed.heater %> P-1 ; Set heater <%- template.bed.heater %> to bang-bang mode
<%			}
		} else if (template.bed.use_pid) { -%>
M307 H<%- template.bed.heater %> B0 S<%- (template.heaters[template.bed.heater].scale_factor / 100).toFixed(2) %> ; Disable bang-bang mode for the bed heater and set PWM limit
<%		} else if (template.bed.heater != 0) { -%>
M307 H<%- template.bed.heater %> B1 S<%- (template.heaters[template.bed.heater].scale_factor / 100).toFixed(2) %>; Enable bang-bang mode for the bed heater and set PWM limit
<%		}
	}

	if (template.chamber.present) {
		if (template.chamber.heater != 0) { -%>
M141 H<%- template.chamber.heater %> ; Assign chamber heater to heater <%- template.bed.heater %>
<%		}
		if (template.firmware <= 1.16) {
			if (template.chamber.heater == 0 && template.bed.use_pid) { -%>
M301 H<%- template.chamber.heater %> S<%- (template.heaters[template.chamber.heater].scale_factor / 100).toFixed(2) %> P10 I0.1 D200 T0.4 W180 B30 ; Use PID on chamber heater (may require further tuning)
<%			} else if (template.chamber.heater != 0) { -%>
M301 H<%- template.chamber.heater %> P-1 ; Set heater <%- template.chamber.heater %> to bang-bang mode
<%			}
		} else if (template.chamber.heater == 0 && template.bed.use_pid) { -%>
M307 H<%- template.chamber.heater %> B0 S<%- (template.heaters[template.chamber.heater].scale_factor / 100).toFixed(2) %>; Disable bang-bang mode for the bed heater and set PWM limit
<%		} else if (template.chamber.heater != 0) { -%>
M307 H<%- template.chamber.heater %> B0 S<%- (template.heaters[template.chamber.heater].scale_factor / 100).toFixed(2) %>; Enable bang-bang mode for the bed heater and set PWM limit
<%		}
	}

	// FIXME: Adjust the block below if Steinhart-Hart parameters are supposed to be used!
	template.heaters.forEach(function(heater, i) {
		if (heater != null) {
			if (i != (template.bed.present ? template.bed.heater : -1) &&
				i != (template.chamber.present ? template.chamber.heater : -1) &&
				heater.scale_factor != 100) { -%>
M301 H<%- i %> S<%- (heater.scale_factor / 100).toFixed(2) %> ; Set heater <%- i %> PWM limit to <%- heater.scale_factor %>%
<%			}
			if (template.firmware <= 1.16) { -%>
M305 P<%- i %> T<%- heater.thermistor %> B<%- heater.beta %> R<%- heater.series %><%- (heater.channel != i) ? " X" + heater.channel : "" %> ; Set thermistor + ADC parameters for heater <%- i %><%- (heater.channel != i) ? " and remap it to channel " + heater.channel : "" %>
<%			} else {
				if (heater.channel < 100) { -%>
M305 P<%- i %> T<%- heater.thermistor %> B<%- heater.beta + ((heater.c == 0) ? 0 : " C" + heater.c.toExponential(6)) %> R<%- heater.series %><%- (heater.channel != i) ? " X" + heater.channel : "" %> ; Set thermistor + ADC parameters for heater <%- i %><%- (heater.channel != i) ? " and remap it to channel " + heater.channel : "" %>
<%				} else if (heater.channel >= 200 && heater.channel < 250) { -%>
M305 P<%- i %> X<%- heater.channel %> R<%- heater.series %> ; Configure PT100 for heater <%- i %>
<%				} else if (heater.channel >= 500 && heater.channel < 550) { -%>
M305 P<%- i %> X<%- heater.channel %> R<%- heater.series %> ; Configure PT1000 for heater <%- i %>
<%				} else { -%>
M305 P<%- i %> X<%- heater.channel %> ; Configure thermocouple for heater <%- i %>
<%				} -%>
M143 H<%- i %> S<%- heater.temp_limit %> ; Set temperature limit for heater <%- i %> to <%- heater.temp_limit %>C
<%			}
		}
	}); -%>

; Fans
<%	template.fans.forEach(function(fan, fanNumber) {
		const thermostaticOptions = (fan.thermostatic) ? "H" + fan.heaters.join(":") + " T" + fan.trigger_temperature : "H-1"; -%>
M106 P<%- fanNumber %> S<%- fan.value / 100 %> I<%- fan.inverted ? 1 : 0 %> F<%- fan.frequency %> <%- thermostaticOptions %> ; Set fan <%- fanNumber %> value, PWM signal inversion and frequency. Thermostatic control is turned <%- fan.thermostatic ? "on" : "off" %>
<%	}); -%>

; Tools
<%	template.tools.forEach(function(tool) { -%>
M563 P<%- tool.number %><%- (tool.name != "") ? ` S"${tool.name}"` : "" %> D<%- tool.extruders.join(":") %> H<%- tool.heaters.join(":") %> ; Define tool <%- tool.number %>
G10 P<%- tool.number %> X<%- tool.x_offset %> Y<%- tool.y_offset %> Z<%- tool.z_offset %> ; Set tool <%- tool.number %> axis offsets
G10 P<%- tool.number %> R0 S0 ; Set initial tool <%- tool.number %> active and standby temperatures to 0C
<%		if (tool.extruders.length > 1) { -%>
M568 P<%- tool.number %> S1 ; Enable mixing for tool <%- tool.number %>
M567 P<%- tool.number %> E<%- tool.mix_ratio.join(":") %> ; Set mixing ratios for tool <%- tool.number %>
<%		}
	});

	if (template.firmware >= 1.20) {
		if (template.auto_save.enabled) {
			const gcodes_to_run = template.auto_save.gcodes_to_run.replace(/"/g, "\"\""); -%>

; Automatic power saving
M911 S<%- template.auto_save.save_threshold -%> R<%- template.auto_save.resume_threshold -%> P"<%- gcodes_to_run -%>" ; Set voltage thresholds and actions to run on power loss
<%		} else { -%>

; Automatic saving after power loss is not enabled
<%		}
	}

	if (template.custom_settings.trim() != "") { -%>

; Custom settings
<%- template.custom_settings %>
<%	} else { -%>

; Custom settings are not configured
<%	}
	if (template.nvram || (template.generate_t_code && template.tools.length > 0)) { -%>

; Miscellaneous
<%		if (template.nvram) { -%>
M501 ; Load saved parameters from non-volatile memory
<%		}
		if (template.generate_t_code && template.tools.length > 0) { -%>
T<%- template.tools[0].number %> ; Select first tool
<%		}
	} -%>
